<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>FlowTasks</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
    <style>
        body {
            background: #f8f9fa;
        }

        .drag-over {
            background-color: #f1f5f9 !important;
        }

        .dragging {
            opacity: 0.5;
        }
    </style>
</head>
<body class="bg-[#f9fafb] text-[#111827] font-sans">

    <!-- Columns -->
    <div class="flex flex-1 overflow-auto p-4 space-x-4 min-h-[calc(100vh-120px)]">
        <div id="todo" class="flex-1 bg-white rounded-lg shadow-sm p-4 space-y-2 transition">
            <h2 class="text-lg font-semibold mb-2">To Do</h2>
        </div>
        <div id="doing" class="flex-1 bg-white rounded-lg shadow-sm p-4 space-y-2 transition">
            <h2 class="text-lg font-semibold mb-2">Doing</h2>
        </div>
        <div id="done" class="flex-1 bg-white rounded-lg shadow-sm p-4 space-y-2 transition">
            <h2 class="text-lg font-semibold mb-2">Done</h2>
        </div>
    </div>

    <!-- Delete Area (hidden on load, shown while dragging) -->
    <div id="delete-area"
         class="fixed bottom-24 left-1/2 transform -translate-x-1/2 w-16 h-16 rounded-full bg-white shadow-lg flex items-center justify-center text-2xl font-bold text-red-500 select-none transition-colors"
         style="display:none; cursor: pointer;">
        Ã—
    </div>

    <!-- Input (Sticky Footer) -->
    <form id="task-form" class="fixed bottom-6 w-full flex justify-center pointer-events-none">
        <input type="text"
               id="task-input"
               placeholder="Add a task..."
               class="pointer-events-auto w-3/4 max-w-md bg-white text-[#111827] placeholder-gray-400 px-5 py-3 rounded-full shadow-md border border-gray-200 focus:outline-none focus:ring-2 focus:ring-[#a5b4fc] transition-all" />
    </form>

    <!-- Minimalist Login Overlay -->
    <div id="login-screen" class="fixed inset-0 z-50 bg-white/80 backdrop-blur-sm flex items-center justify-center transition-opacity duration-500">
        <form id="login-form" class="bg-white shadow-md rounded-2xl p-8 w-80 space-y-4 text-center">
            <div class="mb-6 text-2xl font-semibold text-gray-800">Welcome</div>
            <input type="text"
                   placeholder="username"
                   class="w-full px-4 py-2 border border-gray-300 rounded-full text-gray-700 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 transition" />
            <input type="password"
                   placeholder="password"
                   class="w-full px-4 py-2 border border-gray-300 rounded-full text-gray-700 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400 transition" />
            <button type="submit"
                    class="w-full bg-gray-800 hover:bg-gray-900 text-white py-2 rounded-full transition-all">
                log in
            </button>
        </form>
    </div>

    <script>
        const form = document.getElementById('task-form');
        const input = document.getElementById('task-input');
        const columns = ['todo', 'doing', 'done'].map(id => document.getElementById(id));
        const deleteArea = document.getElementById('delete-area');

        let ghost = null;
        let draggedText = null;
        let activeDropZone = null;
        let originalTask = null;

        // Hide delete area initially
        deleteArea.style.display = "none";

        form.addEventListener('submit', e => {
            e.preventDefault();
            const text = input.value.trim();
            if (!text) return;

            const task = createTaskElement(text);
            document.getElementById('todo').appendChild(task);
            input.value = '';
        });

        function createTaskElement(text) {
            const task = document.createElement('div');
            task.className = "bg-white border border-gray-100 px-3 py-2 rounded shadow-sm cursor-grab hover:shadow-md transition-shadow";
            task.textContent = text;
            task.dataset.text = text;

            // --- Mouse drag events ---
            task.setAttribute("draggable", true);

            task.addEventListener('dragstart', () => {
                draggedText = text;
                originalTask = task;
                ghost = createGhost(text);
                document.body.appendChild(ghost);

                deleteArea.style.display = "flex";
            });

            task.addEventListener('dragend', () => {
                if (ghost) ghost.remove();

                if (activeDropZone === deleteArea && draggedText) {
                    // Delete the original task, no re-adding
                    originalTask.remove();
                } else if (activeDropZone && draggedText) {
                    animateTypingDrop(draggedText, activeDropZone);
                    originalTask.remove();
                }
                draggedText = null;
                originalTask = null;
                activeDropZone = null;

                deleteArea.style.display = "none";
            });

            // --- Touch events ---
            task.addEventListener('touchstart', e => {
                const touch = e.touches[0];
                draggedText = text;
                originalTask = task;

                ghost = createGhost(text);
                ghost.style.top = `${touch.clientY}px`;
                ghost.style.left = `${touch.clientX}px`;
                document.body.appendChild(ghost);

                deleteArea.style.display = "flex";
            });

            task.addEventListener('touchmove', e => {
                e.preventDefault();
                const touch = e.touches[0];
                if (ghost) {
                    ghost.style.top = `${touch.clientY}px`;
                    ghost.style.left = `${touch.clientX}px`;
                }

                const target = document.elementFromPoint(touch.clientX, touch.clientY);
                activeDropZone = target?.closest('#todo, #doing, #done, #delete-area') || null;
            });

            task.addEventListener('touchend', () => {
                if (ghost) ghost.remove();

                if (activeDropZone === deleteArea && draggedText) {
                    originalTask.remove();
                } else if (activeDropZone && draggedText) {
                    animateTypingDrop(draggedText, activeDropZone);
                    originalTask.remove();
                }
                draggedText = null;
                originalTask = null;
                activeDropZone = null;

                deleteArea.style.display = "none";
            });

            return task;
        }

        function createGhost(text) {
            const el = document.createElement('div');
            el.textContent = text;
            el.className = "fixed px-3 py-2 rounded shadow-lg bg-white border border-gray-300 pointer-events-none opacity-90 text-sm";
            el.style.zIndex = 1000;
            el.style.transform = "translate(-50%, -50%)";
            return el;
        }

        // --- Handle mouseover column drop detection ---
        columns.forEach(col => {
            col.addEventListener('dragover', e => {
                e.preventDefault();
                activeDropZone = col;
                col.classList.add("drag-over");
            });

            col.addEventListener('dragleave', () => {
                col.classList.remove("drag-over");
            });

            col.addEventListener('drop', e => {
                e.preventDefault();
                if (ghost) ghost.remove();

                if (activeDropZone === deleteArea && draggedText) {
                    originalTask.remove();
                } else if (draggedText && activeDropZone) {
                    animateTypingDrop(draggedText, activeDropZone);
                    originalTask.remove();
                }
                draggedText = null;
                originalTask = null;
                if (activeDropZone) activeDropZone.classList.remove("drag-over");
                activeDropZone = null;

                deleteArea.style.display = "none";
            });
        });

        // Also add dragover/drop listeners on deleteArea itself
        deleteArea.addEventListener('dragover', e => {
            e.preventDefault();
            activeDropZone = deleteArea;
            deleteArea.classList.add('bg-red-100', 'text-red-700');
        });
        deleteArea.addEventListener('dragleave', e => {
            deleteArea.classList.remove('bg-red-100', 'text-red-700');
            if (activeDropZone === deleteArea) activeDropZone = null;
        });
        deleteArea.addEventListener('drop', e => {
            e.preventDefault();
            if (ghost) ghost.remove();
            if (draggedText && activeDropZone === deleteArea) {
                originalTask.remove();
            }
            draggedText = null;
            originalTask = null;
            activeDropZone = null;
            deleteArea.style.display = "none";
            deleteArea.classList.remove('bg-red-100', 'text-red-700');
        });

        function animateTypingDrop(text, container) {
            const task = document.createElement('div');
            task.className = "bg-white border border-gray-200 px-3 py-2 rounded shadow-sm cursor-grab hover:shadow-md transition-shadow";
            task.textContent = '';
            container.appendChild(task);

            let i = 0;
            const interval = setInterval(() => {
                task.textContent += text[i];
                i++;
                if (i >= text.length) {
                    clearInterval(interval);

                    // Replace with real task element so it can be dragged again
                    const finalTask = createTaskElement(text);
                    container.replaceChild(finalTask, task);
                }
            }, 30); // Typing speed (ms per character)
        }

        // Minimal Login Handler
        const loginScreen = document.getElementById("login-screen");
        const loginForm = document.getElementById("login-form");

        loginForm.addEventListener("submit", function (e) {
            e.preventDefault();
            loginScreen.classList.add("opacity-0");
            setTimeout(() => {
                loginScreen.style.display = "none";
            }, 500);
        });


    </script>
</body>
</html>
